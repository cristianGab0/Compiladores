
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 11 20:19:34 CST 2021
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue May 11 20:19:34 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\032" +
    "\003\000\002\032\003\000\002\006\005\000\002\006\005" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\006\000\002\011\010\000\002\012\005\000\002\013" +
    "\004\000\002\013\003\000\002\030\003\000\002\030\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\014\005\000\002\016\011\000\002" +
    "\016\015\000\002\017\013\000\002\021\006\000\002\020" +
    "\003\000\002\020\004\000\002\022\011\000\002\026\003" +
    "\000\002\026\004\000\002\026\004\000\002\027\004\000" +
    "\002\027\003\000\002\023\020\000\002\024\014\000\002" +
    "\025\003\000\002\025\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\026\031\021\032\026\034\014\036\013\040" +
    "\006\043\031\045\024\051\030\054\025\055\012\001\002" +
    "\000\034\002\ufffe\005\ufffe\031\021\032\026\034\014\036" +
    "\013\040\006\043\031\045\024\046\ufffe\051\030\054\025" +
    "\055\012\001\002\000\040\002\ufff6\005\ufff6\031\ufff6\032" +
    "\ufff6\034\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\045\ufff6\046\ufff6\051\ufff6\054\ufff6\055\ufff6\001\002\000" +
    "\004\004\174\001\002\000\040\002\ufff9\005\ufff9\031\ufff9" +
    "\032\ufff9\034\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\045\ufff9\046\ufff9\051\ufff9\054\ufff9\055\ufff9\001\002" +
    "\000\040\002\ufffb\005\ufffb\031\ufffb\032\ufffb\034\ufffb\036" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\001\002\000\004\002\173\001" +
    "\002\000\034\002\ufff2\005\ufff2\031\ufff2\032\ufff2\034\ufff2" +
    "\036\ufff2\040\ufff2\043\ufff2\045\ufff2\046\ufff2\051\ufff2\054" +
    "\ufff2\055\ufff2\001\002\000\004\054\155\001\002\000\004" +
    "\004\143\001\002\000\040\002\ufff4\005\ufff4\031\ufff4\032" +
    "\ufff4\034\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\051\ufff4\054\ufff4\055\ufff4\001\002\000" +
    "\034\002\ufffc\005\ufffc\031\021\032\026\034\014\036\013" +
    "\040\006\043\031\045\024\046\ufffc\051\030\054\025\055" +
    "\012\001\002\000\040\002\ufff5\005\ufff5\031\ufff5\032\ufff5" +
    "\034\ufff5\036\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045" +
    "\ufff5\046\ufff5\051\ufff5\054\ufff5\055\ufff5\001\002\000\040" +
    "\002\ufffa\005\ufffa\031\ufffa\032\ufffa\034\ufffa\036\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\045\ufffa\046\ufffa\051\ufffa" +
    "\054\ufffa\055\ufffa\001\002\000\004\054\124\001\002\000" +
    "\040\002\ufff8\005\ufff8\031\ufff8\032\ufff8\034\ufff8\036\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\051" +
    "\ufff8\054\ufff8\055\ufff8\001\002\000\004\002\000\001\002" +
    "\000\004\054\111\001\002\000\040\002\ufff7\005\ufff7\031" +
    "\ufff7\032\ufff7\034\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\045\ufff7\046\ufff7\051\ufff7\054\ufff7\055\ufff7\001" +
    "\002\000\010\004\103\047\105\050\104\001\002\000\040" +
    "\002\ufff3\005\ufff3\031\ufff3\032\ufff3\034\ufff3\036\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\051\ufff3" +
    "\054\ufff3\055\ufff3\001\002\000\034\002\ufff1\005\ufff1\031" +
    "\ufff1\032\ufff1\034\ufff1\036\ufff1\040\ufff1\043\ufff1\045\ufff1" +
    "\046\ufff1\051\ufff1\054\ufff1\055\ufff1\001\002\000\004\004" +
    "\032\001\002\000\004\031\034\001\002\000\004\005\044" +
    "\001\002\000\004\054\035\001\002\000\012\047\042\052" +
    "\041\053\040\054\037\001\002\000\040\002\ufff0\005\ufff0" +
    "\031\ufff0\032\ufff0\034\ufff0\036\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\051\ufff0\054\ufff0\055\ufff0" +
    "\001\002\000\040\002\uffec\005\uffec\031\uffec\032\uffec\034" +
    "\uffec\036\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\051\uffec\054\uffec\055\uffec\001\002\000\040\002" +
    "\uffef\005\uffef\031\uffef\032\uffef\034\uffef\036\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\051\uffef\054" +
    "\uffef\055\uffef\001\002\000\040\002\uffed\005\uffed\031\uffed" +
    "\032\uffed\034\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043" +
    "\uffed\045\uffed\046\uffed\051\uffed\054\uffed\055\uffed\001\002" +
    "\000\004\054\043\001\002\000\040\002\uffee\005\uffee\031" +
    "\uffee\032\uffee\034\uffee\036\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\045\uffee\046\uffee\051\uffee\054\uffee\055\uffee\001" +
    "\002\000\004\004\045\001\002\000\006\047\051\052\050" +
    "\001\002\000\004\005\073\001\002\000\032\013\056\014" +
    "\064\015\053\016\062\017\066\022\054\023\071\024\067" +
    "\025\061\026\070\027\057\030\065\001\002\000\050\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\001\002" +
    "\000\004\054\052\001\002\000\050\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\001\002\000\006\047\uffd8" +
    "\052\uffd8\001\002\000\006\047\uffd2\052\uffd2\001\002\000" +
    "\006\047\051\052\050\001\002\000\006\047\uffdb\052\uffdb" +
    "\001\002\000\006\047\uffd5\052\uffd5\001\002\000\006\047" +
    "\uffe2\052\uffe2\001\002\000\006\047\uffd7\052\uffd7\001\002" +
    "\000\006\047\uffda\052\uffda\001\002\000\006\047\uffe3\052" +
    "\uffe3\001\002\000\006\047\uffd9\052\uffd9\001\002\000\006" +
    "\047\uffd4\052\uffd4\001\002\000\006\047\uffdc\052\uffdc\001" +
    "\002\000\006\047\uffd3\052\uffd3\001\002\000\006\047\uffd6" +
    "\052\uffd6\001\002\000\006\047\uffd1\052\uffd1\001\002\000" +
    "\004\005\uffd0\001\002\000\004\004\074\001\002\000\004" +
    "\044\075\001\002\000\004\054\076\001\002\000\004\005" +
    "\077\001\002\000\004\004\100\001\002\000\026\031\021" +
    "\032\026\034\014\036\013\040\006\043\031\045\024\051" +
    "\030\054\025\055\012\001\002\000\004\005\102\001\002" +
    "\000\040\002\uffc3\005\uffc3\031\uffc3\032\uffc3\034\uffc3\036" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3" +
    "\051\uffc3\054\uffc3\055\uffc3\001\002\000\026\031\021\032" +
    "\026\034\014\036\013\040\006\043\031\045\024\051\030" +
    "\054\025\055\012\001\002\000\040\002\uffe9\005\uffe9\031" +
    "\uffe9\032\uffe9\034\uffe9\036\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\051\uffe9\054\uffe9\055\uffe9\001" +
    "\002\000\004\054\106\001\002\000\040\002\uffeb\005\uffeb" +
    "\031\uffeb\032\uffeb\034\uffeb\036\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\045\uffeb\046\uffeb\051\uffeb\054\uffeb\055\uffeb" +
    "\001\002\000\004\005\110\001\002\000\040\002\uffe8\005" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\036\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\045\uffe8\046\uffe8\051\uffe8\054\uffe8\055" +
    "\uffe8\001\002\000\004\004\112\001\002\000\004\054\113" +
    "\001\002\000\006\005\uffc1\054\113\001\002\000\004\005" +
    "\115\001\002\000\004\004\116\001\002\000\026\031\021" +
    "\032\026\034\014\036\013\040\006\043\031\045\024\051" +
    "\030\054\025\055\012\001\002\000\004\046\120\001\002" +
    "\000\010\047\042\052\041\054\037\001\002\000\004\005" +
    "\122\001\002\000\040\002\uffc2\005\uffc2\031\uffc2\032\uffc2" +
    "\034\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\051\uffc2\054\uffc2\055\uffc2\001\002\000\004" +
    "\005\uffc0\001\002\000\016\020\126\047\042\050\125\052" +
    "\041\053\040\054\037\001\002\000\040\002\uffea\005\uffea" +
    "\031\uffea\032\uffea\034\uffea\036\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\045\uffea\046\uffea\051\uffea\054\uffea\055\uffea" +
    "\001\002\000\004\033\127\001\002\000\006\047\051\052" +
    "\050\001\002\000\014\006\135\007\136\010\133\011\137" +
    "\012\134\001\002\000\004\021\132\001\002\000\040\002" +
    "\uffe7\005\uffe7\031\uffe7\032\uffe7\034\uffe7\036\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\051\uffe7\054" +
    "\uffe7\055\uffe7\001\002\000\006\047\uffdf\052\uffdf\001\002" +
    "\000\006\047\uffdd\052\uffdd\001\002\000\006\047\uffe1\052" +
    "\uffe1\001\002\000\006\047\uffe0\052\uffe0\001\002\000\006" +
    "\047\uffde\052\uffde\001\002\000\006\047\051\052\050\001" +
    "\002\000\004\021\uffe6\001\002\000\010\002\ufffd\005\ufffd" +
    "\046\ufffd\001\002\000\006\047\051\052\050\001\002\000" +
    "\004\005\145\001\002\000\004\004\146\001\002\000\026" +
    "\031\021\032\026\034\014\036\013\040\006\043\031\045" +
    "\024\051\030\054\025\055\012\001\002\000\004\005\150" +
    "\001\002\000\042\002\uffcf\005\uffcf\031\uffcf\032\uffcf\034" +
    "\uffcf\035\151\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\051\uffcf\054\uffcf\055\uffcf\001\002\000" +
    "\004\004\152\001\002\000\026\031\021\032\026\034\014" +
    "\036\013\040\006\043\031\045\024\051\030\054\025\055" +
    "\012\001\002\000\004\005\154\001\002\000\040\002\uffce" +
    "\005\uffce\031\uffce\032\uffce\034\uffce\036\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\045\uffce\046\uffce\051\uffce\054\uffce" +
    "\055\uffce\001\002\000\004\004\156\001\002\000\004\050" +
    "\160\001\002\000\004\037\166\001\002\000\004\004\163" +
    "\001\002\000\006\037\uffcb\050\160\001\002\000\004\037" +
    "\uffca\001\002\000\026\031\021\032\026\034\014\036\013" +
    "\040\006\043\031\045\024\051\030\054\025\055\012\001" +
    "\002\000\004\005\165\001\002\000\006\037\uffcc\050\uffcc" +
    "\001\002\000\004\004\167\001\002\000\026\031\021\032" +
    "\026\034\014\036\013\040\006\043\031\045\024\051\030" +
    "\054\025\055\012\001\002\000\004\005\171\001\002\000" +
    "\004\005\172\001\002\000\040\002\uffcd\005\uffcd\031\uffcd" +
    "\032\uffcd\034\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\045\uffcd\046\uffcd\051\uffcd\054\uffcd\055\uffcd\001\002" +
    "\000\004\002\001\001\002\000\006\047\051\052\050\001" +
    "\002\000\004\005\176\001\002\000\004\004\177\001\002" +
    "\000\022\031\021\032\026\034\014\036\013\040\006\043" +
    "\031\045\024\054\025\001\002\000\030\005\uffc8\031\uffc8" +
    "\032\uffc8\034\uffc8\036\uffc8\040\uffc8\041\206\042\205\043" +
    "\uffc8\045\uffc8\054\uffc8\001\002\000\004\005\204\001\002" +
    "\000\024\005\uffc4\031\021\032\026\034\014\036\013\040" +
    "\006\043\031\045\024\054\025\001\002\000\004\005\uffc5" +
    "\001\002\000\040\002\uffc9\005\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9" +
    "\046\uffc9\051\uffc9\054\uffc9\055\uffc9\001\002\000\024\005" +
    "\uffc6\031\uffc6\032\uffc6\034\uffc6\036\uffc6\040\uffc6\043\uffc6" +
    "\045\uffc6\054\uffc6\001\002\000\024\005\uffc7\031\uffc7\032" +
    "\uffc7\034\uffc7\036\uffc7\040\uffc7\043\uffc7\045\uffc7\054\uffc7" +
    "\001\002\000\010\002\uffff\005\uffff\046\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\032\003\010\004\022\005\003\006\007\010" +
    "\017\011\006\016\004\017\026\022\016\023\014\024\021" +
    "\032\015\001\001\000\030\004\206\005\003\006\007\010" +
    "\017\011\006\016\004\017\026\022\016\023\014\024\021" +
    "\032\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\141\005\003\006\007\010\017\011\006" +
    "\016\004\017\026\022\016\023\014\024\021\032\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\046\014\045\001\001\000\002\001" +
    "\001\000\010\015\062\030\054\031\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\100\005\003\006\007" +
    "\010\017\011\006\016\004\017\026\022\016\023\014\024" +
    "\021\032\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\106\005\003\006\007\010\017\011\006\016" +
    "\004\017\026\022\016\023\014\024\021\032\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\113\001\001\000\004\025\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\116\005\003\006\007" +
    "\010\017\011\006\016\004\017\026\022\016\023\014\024" +
    "\021\032\015\001\001\000\002\001\001\000\004\007\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\130\013\127\001\001\000\004\033" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\046\014\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\146" +
    "\005\003\006\007\010\017\011\006\016\004\017\026\022" +
    "\016\023\014\024\021\032\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\152\005" +
    "\003\006\007\010\017\011\006\016\004\017\026\022\016" +
    "\023\014\024\021\032\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\156\021\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\161\021\160\001\001\000\002\001\001\000\030\004\163" +
    "\005\003\006\007\010\017\011\006\016\004\017\026\022" +
    "\016\023\014\024\021\032\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\167\005" +
    "\003\006\007\010\017\011\006\016\004\017\026\022\016" +
    "\023\014\024\021\032\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\046\014\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\177\006\007\010\017\011\006\016\004" +
    "\017\026\022\016\023\014\024\021\026\201\027\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\177" +
    "\006\007\010\017\011\006\016\004\017\026\022\016\023" +
    "\014\024\021\026\201\027\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		public String textError="";
		public boolean isError=false;
	public static void main(String args[]) throws Exception{
		
		new parser(new Yylex(System.in)).parse();
	}
	
	 public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
		isError=true;
		textError="Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".";
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) { 
        System.out.print(""); 
    }  
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGUMENTOS ::= IDENTIFICADOR ARGUMENTOS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGUMENTOS ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRPROC ::= PROC IDENTIFICADOR LLA ARGUMENTOS LLC LLA expr_list RETURN VALOR LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*INSTRPROC*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRFOR ::= FOR LLA DECLARACION LLC LLA TEST LLC LLA INCR IDENTIFICADOR LLC LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*INSTRFOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DETWHILE ::= EXPRWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*DETWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DETWHILE ::= EXPRWHILE DETWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*DETWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRWHILE ::= expr BREAK 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*EXPRWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRWHILE ::= expr CONTINUE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*EXPRWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRWHILE ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*EXPRWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRWHILE ::= WHILE LLA TEST LLC LLA DETWHILE LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*INSTRWHILE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRCASE ::= CASE INSTRCASE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*INSTRCASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRCASE ::= CASE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*INSTRCASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASE ::= AGRUPACION LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*CASE*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTSWITCH ::= SWITCH IDENTIFICADOR LLA INSTRCASE DEFAULT LLA expr_list LLC LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*INSTSWITCH*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRIF ::= IF LLA TEST LLC LLA expr_list LLC ELSE LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*INSTRIF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRIF ::= IF LLA TEST LLC LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*INSTRIF*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TEST ::= OPERANDO OPERADOR OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*TEST*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERLOGICO ::= OR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*OPERLOGICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERLOGICO ::= AND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*OPERLOGICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERLOGICO ::= NOT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*OPERLOGICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERRELACIONAL ::= NI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERRELACIONAL ::= IN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERRELACIONAL ::= NE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERRELACIONAL ::= EQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERRELACIONAL ::= MENORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERRELACIONAL ::= MAYOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERRELACIONAL ::= MAYORIGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERRELACIONAL ::= MENOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERRELACIONAL ::= IGUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OPERRELACIONAL*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERMATEMATICO ::= MOD 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OPERMATEMATICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERMATEMATICO ::= DIVISION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OPERMATEMATICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERMATEMATICO ::= MULTIPLICACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OPERMATEMATICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERMATEMATICO ::= MENOS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OPERMATEMATICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERMATEMATICO ::= MAS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OPERMATEMATICO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADOR ::= OPERLOGICO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OPERADOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADOR ::= OPERRELACIONAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OPERADOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERANDO ::= DIGITO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERANDO ::= ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*OPERANDO*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACION ::= OPERANDO OPERMATEMATICO OPERANDO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AGRUPACIONES ::= SET IDENTIFICADOR CA EXPR OPERACION CC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AGRUPACIONES ::= PUTS LLA expr_list LLC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AGRUPACIONES ::= PUTS AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AGRUPACIONES ::= SET IDENTIFICADOR AGRUPACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*AGRUPACIONES*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ACCEDERVALOR ::= PUTS ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*ACCEDERVALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= DIGITO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALOR ::= ASIG IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*VALOR*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= SET IDENTIFICADOR DIGITODECIMAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= SET IDENTIFICADOR VALOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exprEspeciales ::= COMENTARIO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*exprEspeciales*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exprEspeciales ::= ERROR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*exprEspeciales*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= INSTSWITCH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= INSTRFOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= INSTRWHILE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= INSTRIF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= IDENTIFICADOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= INSTRPROC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= AGRUPACIONES 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= ACCEDERVALOR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_list ::= exprEspeciales 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= exprEspeciales expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= expr_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*ini*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

